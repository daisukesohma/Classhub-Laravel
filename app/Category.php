<?php

namespace App;

use App\Helpers\ClassHubHelper;
use Cviebrock\EloquentSluggable\Sluggable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * App\Category
 *
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\SubCategory[] $subCategories
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category newQuery()
 * @method static \Illuminate\Database\Query\Builder|\App\Category onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category query()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Query\Builder|\App\Category withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Category withoutTrashed()
 * @mixin \Eloquent
 * @property int $id
 * @property string $type
 * @property string $name
 * @property string $slug
 * @property int|null $parent_id
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereParentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereSlug($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category findSimilarSlugs($attribute, $config, $slug)
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Post[] $posts
 * @property int|null $banner
 * @property-read \App\Image|null $bannerPhoto
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Category whereBanner($value)
 */
class Category extends Model
{
    use SoftDeletes;
    use Sluggable;
    
    protected $fillable = ['name', 'slug', 'type', 'parent_id', 'banner'];
    
    protected $with = ['bannerPhoto'];
    
    public function sluggable(): array
    {
        return [
            'slug' => [
                'source' => ['name'],
                'separator' => '-'
            ]
        ];
    }
    
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }
    
    public function bannerPhoto()
    {
        return $this->belongsTo(Image::class, 'banner');
    }
    
    public static function all($columns = [])
    {
        return Category::with('subCategories')->whereNull('parent_id')->get();
    }
    
    public static function getAllCategories()
    {
        return Category::with('subCategories')->whereNull('parent_id')
            ->get()->groupBy('type');
    }
    
    public static function getParentCategories()
    {
        return Category::withTrashed()->whereNull('parent_id')->get();
        
    }

    public static function getSubCategories($parent_id)
    {
        return Category::where('parent_id', $parent_id)->get();
    }

    public static function getDisplayName($id)
    {
        $item = Category::withTrashed()->findOrFail($id);

        return $item->parent_id ? Category::getDisplayName($item->parent_id) . ' - ' . $item->name
            : $item->name;
    }
    
    public function getParent()
    {
        return Category::withTrashed()->findOrFail($this->parent_id);
    }
    
    public function subCategories()
    {
        return $this->hasMany(Category::class, 'parent_id', 'id');
    }
    
    public function getCycles()
    {
        $cycles = [];
        foreach ($this->subCategories as $subCategory) {
            if ($subCategory->subCategories->count()) {
                $cycles[$subCategory->name] = [];
                foreach ($subCategory->subCategories as $cycle) {
                    array_push($cycles[$subCategory->name], $cycle);
                }
            }
        }
        
        return $cycles;
    }

    public function getLevels()
    {
        $levels = [];
        foreach ($this->getCycles() as $groupedCycles) {
            foreach ($groupedCycles as $cycle) {
                if ($cycle->subCategories->count()) {
                    $levels[$cycle->name] = [];
                    foreach ($cycle->subCategories as $level) {
                        array_push($levels[$cycle->name], $level);
                    }
                }
            }
        }
        
        return $levels;
    }

    public function posts()
    {
        return $this->hasMany(Post::class, 'category_id');
    }

    public static function getSubCategoryIdsFromName($name) 
    {
        $category = Category::withTrashed()->where('name', $name)->first();
        
        return $category ? explode(',', $category->getSubCategoryIds()) : [];
    }
    
    public function getSubCategoryIds()
    {
        $parentCategory = Category::withTrashed()->findOrFail($this->id);

        $categoryIds = '';
        if ($parentCategory->subCategories()->count()) {
            foreach ($parentCategory->subCategories as $item) {
                if ($categoryIds) {
                    $categoryIds = $categoryIds . ',' . $item->getSubCategoryIds();
                } else {
                    $categoryIds = $item->getSubCategoryIds();
                }
            }
        }

        if ($categoryIds) {
            $categoryIds = $parentCategory->id . ',' . $categoryIds;
        } else {
            $categoryIds = $parentCategory->id;
        }

        return $categoryIds;
    }

    public static function getParentCategoryIds($categoryId)
    {
        $ids = [];
        if ($categoryId) {
            $category = Category::findOrFail($categoryId);
            
            array_push($ids, $category->id);
            if (isset($category->parent_id)) {
                $ids = array_merge($ids, Category::getParentCategoryIds($category->parent_id));
            }
        }
        return $ids;
    }
}
