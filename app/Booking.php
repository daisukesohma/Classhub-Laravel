<?php

namespace App;

use App\Jobs\SendEmailJob;
use App\Mail\ClassReminder;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Log;

/**
 * App\Booking
 *
 * @property-read \App\Invoice $invoice
 * @property-read \App\Lesson $lesson
 * @property-read \App\User $user
 * @method static bool|null forceDelete()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking newQuery()
 * @method static \Illuminate\Database\Query\Builder|\App\Booking onlyTrashed()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking query()
 * @method static bool|null restore()
 * @method static \Illuminate\Database\Query\Builder|\App\Booking withTrashed()
 * @method static \Illuminate\Database\Query\Builder|\App\Booking withoutTrashed()
 * @mixin \Eloquent
 * @property int $id
 * @property int $user_id
 * @property int $lesson_id
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereLessonId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereUserId($value)
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\BookingDetail[] $details
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\BookingClass[] $classes
 * @property int $amount
 * @property string $status
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereStatus($value)
 * @property string $code
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereCode($value)
 * @property int $service_fee
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereServiceFee($value)
 * @property int $stripe_fee
 * @property int $refunded_amount
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereRefundedAmount($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereStripeFee($value)
 * @property int $application_fee
 * @property int $stripe_fee_transferred
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Transaction[] $transactions
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereApplicationFee($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Booking whereStripeFeeTransferred($value)
 */
class Booking extends Model
{
    use SoftDeletes;

    protected $fillable = ['code', 'student_name', 'user_id', 'lesson_id', 'amount', 'application_fee',
        'provider_fee_percent','service_fee', 'customer_fee_percent',
        'stripe_fee', 'stripe_fee_transferred', 'refunded_amount', 'status', 'created_at'];

    protected $with = ['lesson', 'classes'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

    }

    public function classes()
    {
        return $this->hasMany(BookingClass::class);
    }

    public function transactions()
    {
        return $this->hasMany(Transaction::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class)->withTrashed();
    }

    public function lesson()
    {
        return $this->belongsTo(Lesson::class)->withTrashed();
    }

    public static function getBookings($date, $type = 'month')
    {
        $dateFormat = $type == 'year' ? 'Y' : 'Y-m';

        $allBookings = Educator::getAllBookings();

        $bookings = $allBookings->filter(function ($item) use ($date, $dateFormat) {
            return Carbon::parse($item->created_at)->format($dateFormat) == $date;
        })->all();

        return collect($bookings);
    }
}

