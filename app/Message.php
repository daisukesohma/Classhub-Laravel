<?php

namespace App;

use App\Helpers\ClassHubHelper;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Message
 *
 * @property-read \App\Chat $chat
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message query()
 * @mixin \Eloquent
 * @property int $chat_id
 * @property int $sender_id
 * @property int $receiver_id
 * @property string $text
 * @property int $read
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereChatId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereRead($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereReceiverId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereSenderId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereText($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereUpdatedAt($value)
 * @property int $id
 * @property int $recipient_id
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereRecipientId($value)
 * @property int|null $booking_id
 * @property string|null $class_ids
 * @property string|null $status
 * @property-read mixed $class_list
 * @property-read mixed $total
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereBookingId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereClassIds($value)
 * @method static \Illuminate\Database\Eloquent\Builder|\App\Message whereStatus($value)
 */
class Message extends Model
{
    protected $fillable = ['chat_id', 'sender_id', 'recipient_id', 'text', 'read', 'type', 'path',
        'booking_id', 'lesson_id', 'class_ids', 'status', 'video_call_time', 'video_call_response',
        'booking_response', 'request_subject_id', 'request_applied', 'request_tutor_detail', 'file_deleted'];
    
    //protected $appends = ['class_list', 'total'];
    
    const FILTER_PATTERNS = [
        '(@\w|\w@|\w@\w)',
        '(https|http|ftp)\:\/\/|([a-z0-9A-Z]+\.[a-z0-9A-Z]+\.[a-zA-Z]{2,4})|([a-z0-9A-Z]+\.[a-zA-Z]{2,4})|\?([a-zA-Z0-9]+[\&\=\#a-z]+)',
        '(083|085|086|087|089|01)\s*\d{7}',
        '(083|085|086|087|089|01)\s*\d{3}\s*\d{4}',
        '\+353'
    ];
    
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }
    
    public function chat()
    {
        return $this->belongsTo(Chat::class);
    }
    
    public function getClassListAttribute()
    {
        $classList = '';
        
        if ($this->class_ids) {
            
            $classIds = strpos($this->class_ids, ',') ? explode(',', $this->class_ids) : [$this->class_ids];
            foreach ($classIds as $classId) {
                $class = LessonClass::findOrFail($classId);
                $classList .= Carbon::parse($class->date)->format('d M Y') . ' (' .
                    Carbon::parse($class->start_time)->format('H:i') . ' - ' .
                    Carbon::parse($class->end_time)->format('H:i') . ') <br>';
            }
        }
        
        return $classList;
    }
    
    public function getTotalAttribute()
    {
        $total = 0;
        
        if ($this->class_ids && $this->booking_id) {
            $booking = Booking::findOrFail($this->booking_id);
            $classIds = strpos($this->class_ids, ',') ? explode(',', $this->class_ids) : [$this->class_ids];
            $total = RefundRequest::where('booking_id', $booking->id)
                ->whereIn('lesson_class_id', $classIds)->get()->sum('amount');
        }
        
        return $total ? ClassHubHelper::roundCents($total) : 0;
    }
}
